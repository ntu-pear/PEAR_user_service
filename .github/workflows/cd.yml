# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CD

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: [self-hosted, Linux, X64, user]

    env:
      DB_SERVER_DEV: ${{ secrets.DB_SERVER_DEV }}
      DB_DATABASE_DEV: ${{ secrets.DB_DATABASE_DEV }}
      DB_DATABASE_PORT: ${{ secrets.DB_DATABASE_PORT }}
      DB_USERNAME_DEV: ${{ secrets.DB_USERNAME_DEV }}
      DB_PASSWORD_DEV: ${{ secrets.DB_PASSWORD_DEV }}
      SENDPULSE_API_KEY: ${{ secrets.SENDPULSE_API_KEY }}
      SENDPULSE_SECRET_KEY: ${{ secrets.SENDPULSE_SECRET_KEY }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      WEB_FE_ORIGIN: ${{ secrets.WEB_FE_ORIGIN }}

    steps:
      - uses: actions/checkout@v4
      - name: Print working directory
        run: |
          pwd
          ls -la
          git status

      - name: Create .env file from GitHub Secrets
        run: |
          echo "DB_SERVER_DEV=${{ secrets.DB_SERVER_DEV }}" >> .env
          echo "DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }}" >> .env
          echo "DB_DATABASE_PORT=${{ secrets.DB_DATABASE_PORT }}" >> .env
          echo "DB_USERNAME_DEV=${{ secrets.DB_USERNAME_DEV }}" >> .env
          echo "DB_PASSWORD_DEV=${{ secrets.DB_PASSWORD_DEV }}" >> .env
          echo "DB_DRIVER_DEV=${{ secrets.DB_DRIVER_DEV }}" >> .env
          echo "SENDPULSE_API_KEY=${{ secrets.SENDPULSE_API_KEY }}" >> .env
          echo "SENDPULSE_SECRET_KEY=${{ secrets.SENDPULSE_SECRET_KEY }}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
          echo "WEB_FE_ORIGIN=${{ secrets.WEB_FE_ORIGIN }}" >> .env

      # Set up kubectl using Azure's GitHub Action (for Ubuntu)
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'  # Optionally specify a version (e.g., 'v1.21.0')

      - name: Set up kubeconfig from GitHub Secret
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
        
      - name: Verify kubectl is working
        run: |
          kubectl get nodes

      - name: Delete old deployment
        run: |
          echo "Deleting old deployment..."
          kubectl delete deployment.apps/user-service-dev service/user-service-dev

      - name: Delete old docker images
        run: |
          docker rmi user_service_dev
          docker rmi localhost:5000/user_service_dev

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build --no-cache -f Dockerfile.dev -t user_service_dev .

      - name: Tag Docker image
        run: |
          echo "Tagging Docker image..."
          docker tag user_service_dev:latest localhost:5000/user_service_dev:latest

      - name: Push Docker image to local registry
        run: |
          echo "Pushing Docker image to localhost:5000...."
          docker push localhost:5000/user_service_dev:latest

      - name: Deploying to Kubernetes
        run: |
          echo "Deploying..."
          kubectl apply -f './k8s/deployment-dev.yaml'